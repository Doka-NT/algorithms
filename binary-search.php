<?php

require_once __DIR__ . '/TimeLogger.php';

$array = range(0, 1000000);
shuffle($array);
$needle = $array[0];
// 3100ms

sort($array);

TimeLogger::logToStdOut(static function () use ($array, $needle) {
    $result = binarySearch($needle, $array);

    echo "Needle is: $needle\n";
    echo "Result is: $result\n";
    echo 'Iterations: ' . TimeLogger::$counter1 . "\n";
});

function binarySearch(int $needle, array $array): ?int
{
    $low = 0; // Минимальный offset
    $high = count($array) - 1; // Максимальный offset

    // Пока мнимальный offset меньше максимального (все итерации)
    // И Когда минимальный равен максимальному (значение найдено), т.е. остался только 1 элемент
    while ($low <= $high) {
        TimeLogger::$counter1++;
        // Находим середину списка
        // это либо count($array), но тогда придется резать массив, что затратно
        // либо сумма нижней и верхней границы
        // -- 1-ая итерация. 0 + 100 = 100, середина списка = 50
        // -- 2-ая итерация. 51 + 100 = 151, середина списка = 75. Сместилась вправо
        $mid = floor($low + $high) / 2;

        // пытаемся угадать нужное значение
        $guess = $array[$mid];

        // Если нашли нужное значение, возвращаем его
        if ($guess === $needle) {
            return $guess;
        }

        // Если искомое значение больше, чем угаданное (угадано в середине списке)
        // то, искомое значение лежит "справа" в большей части
        // для этого нужно сместить нижнюю границу поиска на середину + 1
        // (середину мы уже нашли и знает что это не она)
        if ($needle > $guess) {
            $low = $mid + 1;
        }

        // Если искомое значение меньше, чем угаданное (угадано в середине списке)
        // то, искомое значение лежит "слева" в меньшей части
        // для этого нужно сместить верхнюю границу поиска на середину - 1
        // (середину мы уже нашли и знает что это не она)
        if ($needle < $guess) {
            $high = $mid - 1;
        }
    }

    // если ничего не нашли, возвращает null
    return null;
}

